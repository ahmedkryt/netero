from random import randint
from telegram.ext import Updater, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler
from threading import Thread
from docx import Document
import telegram
import datetime
import schedule
import logging
import time

# –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
def send_photo_with_caption(update, context, caption, markup=None, photo_path=None):
    if not photo_path:
        photo_path = 'https://drive.google.com/drive-viewer/AKGpihYy5z79VqmYw8FoXAbGjSgam-9G4xm8Zu80_h6JDbD01yB5UV7Xi5g2dsGwQsGbm5Xx3SxIb6w1D-QrLAzPehaxf8Fr9Sm1sA=s2560'
    chat_id = update.effective_chat.id
    context.bot.send_photo(chat_id=chat_id, photo=photo_path, caption=caption, reply_markup=markup)


# –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
def send_messages(update, context, text, markup=None):
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)

# —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∞—è –∑–∞–¥–∞–Ω–∏—è, –≤—ã–¥–∞–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
def task(topic_name):
    within_topic = False
    identifiers = []
    next_is_identifier = False
    global decided_day_tasks
    global grade
    doc = Document('0. –ë–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π.docx')
    norm = 10 if grade == 10 else 20
    # –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–æ–ª—å—à–µ 10 –∑–∞–¥–∞–Ω–∏–π, –Ω–µ –≤—ã–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    try:
        if len(decided_day_tasks) >= norm:
            return 0
    except NameError:
        decided_day_tasks = []

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª
    for paragraph in doc.paragraphs:
        if topic_name in paragraph.text:
            within_topic = True
        elif ("–†–∞–∑–¥–µ–ª:" in paragraph.text) or ("–¢–µ–º–∞:" in paragraph.text):
            within_topic = False
        # –ò—â–µ–º –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        if within_topic and ("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:" in paragraph.text):
            next_is_identifier = True
        elif within_topic and next_is_identifier:
            # –°–æ–±–∏—Ä–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ —Å–ø–∏—Å–æ–∫
            identifier = paragraph.text.strip()
            identifiers.append(identifier)
            next_is_identifier = False
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Ç–µ, —á—Ç–æ –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª–∏—Å—å –∑–∞ —ç—Ç–∏ —Å—É—Ç–∫–∏
    task_number = identifiers[randint(0, len(identifiers) - 1)]
    while task_number in decided_day_tasks:
        task_number = identifiers[randint(0, len(identifiers))]
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–¥–∞–µ–º –µ–≥–æ –Ω–∞ –≤—ã—Ö–æ–¥
    decided_day_tasks.append(task_number)

    return task_number

# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
def get_task_text(topic_name, task_number, header):
    doc = Document('0. –ë–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π.docx')
    text = []
    topic_found = False
    task_found = False
    collecting_text = False
    for para in doc.paragraphs:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
        if para.text.strip() == topic_name:
            topic_found = True
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞
        if topic_found:
            if para.text.startswith(task_number):
                task_found = True
                continue

            if task_found:
                if para.text.startswith('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä'):
                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                if para.text.strip() == header:
                    collecting_text = True  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç
                    continue

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
                if any(para.text.startswith(h) for h in
                       ["–¢–µ–∫—Å—Ç:", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", "–ö–ª—é—á:", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"]) and collecting_text:
                    break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤—ã—Ö–æ–¥–∏–º

                # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
                if collecting_text:
                    if para.text.strip() != '':
                        text.append(para.text.strip())

    return '\n'.join(text)

# –æ–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
def reset_tasks():
    global decided_day_tasks
    global decided_tasks
    for i in decided_day_tasks:
        decided_tasks.append(i)
    decided_day_tasks = []

# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–∞ 00:00 –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
def decided_tasks_reset():
    schedule.every().day.at("00:00").do(reset_tasks)
    while True:
        schedule.run_pending()
        time.sleep(1)

# –¥–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def timer(update, context, notice):
    keyboard = [
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data="–í –º–µ–Ω—é")],
        [InlineKeyboardButton('–ö –∑–∞–¥–∞—á–∞–º', callback_data="–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    if notice:
        send_messages(update, context, '''–ù–∞–ø–∏—à–∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è –≤ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–µ: __:__
–ù–∞–ø—Ä–∏–º–µ—Ä, 09:00''')
    else:
        send_messages(update, context, '–ù—É –∫–∞–∫ —Ö–æ—á–µ—à—å üòî', markup)
        schedule.clear()


# —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminder(context, chat_id: int):
    keyboard = [
        [InlineKeyboardButton('–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data="–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è")],
        [InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', callback_data="–í –º–µ–Ω—é")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    context.bot.send_message(chat_id, text='–ü—Ä–∏–≤–µ—Ç, –ø–æ—Ä–∞ –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è', reply_markup=markup)


# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
def set_reminder(update, context: CallbackContext, time):
    chat_id = update.effective_chat.id
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    schedule.clear()
    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    schedule.every().day.at(time).do(send_reminder, context=context, chat_id=chat_id)


# —Ü–∏–∫–ª –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)



def handle_message(update, context):
    global user_status
    global task_key
    global decided_day_tasks
    # –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    if user_status == '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        keyboard = [
            [InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data="–í –º–µ–Ω—é")],
            [InlineKeyboardButton('–ö –∑–∞–¥–∞—á–∞–º', callback_data="–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è")]
        ]
        markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
        # –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_response = update.message.text
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
        try:
            if datetime.datetime.strptime(user_response, '%H:%M').time():
                # –µ—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞–Ω–æ –±–µ–∑ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω—É–ª—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                if len(user_response.split(':')[0]) == 1:
                    user_response = '0' + user_response
                if len(user_response.split(':')[1]) == 1:
                    user_response = user_response[:-1] + '0' + user_response[-1]
                # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                set_reminder(update, context, user_response)
                # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                context.bot.send_message(chat_id=update.effective_chat.id,
                                         text=f'–¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–±—É–¥–µ—à—å!', reply_markup=markup)
        except(IndexError, ValueError):
            update.message.reply_text(f'–ù–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑', reply_markup=markup)
    # –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    elif user_status == '—Ç—Ä–µ–Ω–∞–∂–µ—Ä':
        global grade
        norm = 10 if grade == 10 else 20
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        try:
            keyboard = [
                [InlineKeyboardButton('–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data="–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è")]
            ]
            markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
            user_answer = update.message.text
            if '/' in task_key:
                key_values_list = task_key.split(" / ")
                print(key_values_list)
                print(user_answer)
                if user_answer.lower() in key_values_list:
                    text = (f'üü¢ –í–µ—Ä–Ω–æ!\n'
                            f'–ö–ª—é—á: {task_key}\n'
                            f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {int(len(decided_day_tasks)/(norm/100))}% –Ω–æ—Ä–º—ã')
                    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=markup)
                else:
                    text = (f'üî¥ –ù–µ–≤–µ—Ä–Ω–æ\n'
                            f'–ö–ª—é—á: {task_key}\n'
                            f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {int(len(decided_day_tasks)/(norm/100))}% –Ω–æ—Ä–º—ã')
                    context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=markup)

            elif set(user_answer.lower()) == set(task_key.lower()):

                text = (f'üü¢ –í–µ—Ä–Ω–æ!\n'
                        f'–ö–ª—é—á: {task_key}\n'
                        f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {int(len(decided_day_tasks)/(norm/100))}% –Ω–æ—Ä–º—ã')
                context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=markup)
            else:
                text = (f'üî¥ –ù–µ–≤–µ—Ä–Ω–æ\n'
                        f'–ö–ª—é—á: {task_key}\n'
                        f'–í—ã–ø–æ–ª–Ω–µ–Ω–æ {int(len(decided_day_tasks)/(norm/100))}% –Ω–æ—Ä–º—ã')
                context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=markup)
        except(NameError):
            pass


# –¥–∏–∞–ª–æ–≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def reminder(update, context):
    keyboard = [
        [InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data="–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_photo_with_caption(update, context, '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', markup)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–æ–º
def start_prac(update, context):
    global first_session
    first_session = False
    caption = '''–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è, —Ç–∞–∫ —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Å—è!'''
    keyboard = [
        [InlineKeyboardButton('–Ø –≤ 10 –∫–ª–∞—Å—Å–µ', callback_data="10 –∫–ª–∞—Å—Å")],
        [InlineKeyboardButton('–Ø –≤ 11 –∫–ª–∞—Å—Å–µ', callback_data="11 –∫–ª–∞—Å—Å")]
        ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_messages(update, context, caption, markup)


# –î–∏–∞–ª–æ–≥ –ü—Ä–∞–∫—Ç–∏–∫–∞
def practice(update, context):
    keyboard = [
        [InlineKeyboardButton('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', callback_data="–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è', callback_data="–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ì–µ–Ω–µ—Ç–∏–∫–∞', callback_data="–ì–µ–Ω–µ—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', callback_data="–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–°–µ–ª–µ–∫—Ü–∏—è', callback_data="–°–µ–ª–µ–∫—Ü–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        # [InlineKeyboardButton('–û—Ä–≥–∞–Ω–∏–∑–º –∫–∞–∫ –±–∏–æ—Å–∏—Å—Ç–µ–º–∞', callback_data="–û—Ä–≥–∞–Ω–∏–∑–º –∫–∞–∫ –±–∏–æ—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        # [InlineKeyboardButton('–ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞', callback_data="–ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        # [InlineKeyboardButton('–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è —á–µ–ª–æ–≤–µ–∫–∞', callback_data="–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        # [InlineKeyboardButton('–≠–≤–æ–ª—é—Ü–∏—è', callback_data="–≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        # [InlineKeyboardButton('–≠–∫–æ–ª–æ–≥–∏—è', callback_data="–≠–∫–æ–ª–æ–≥–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–í –º–µ–Ω—é', callback_data="–í –º–µ–Ω—é")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_messages(update, context, '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª', markup)

# –†–∞–∑–¥–µ–ª –ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞ –ü—Ä–∞–∫—Ç–∏–∫–∞
def biology_as_science_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–ù–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        print(task_key)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–¢–µ–∫—Å—Ç:'))


# –†–∞–∑–¥–µ–ª –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def molecular_and_cellular_biology_main_prac(update, context):
    keyboard = [
        [InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏. –ö–ª–µ—Ç–æ—á–Ω–∞—è —Ç–µ–æ—Ä–∏—è', callback_data="–ò—Å—Ç–æ—Ä–∏—è —Ü–∏—Ç–æ–ª–æ–≥–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ë–∏–æ—Ö–∏–º–∏—è', callback_data="–ë–∏–æ—Ö–∏–º–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏', callback_data="–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º', callback_data="–ú–µ—Ç–∞–±–æ–ª–∏–∑–º –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', callback_data="–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞")],
        [InlineKeyboardButton('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª', callback_data="–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∞–∫—Ç–∏–∫–∞")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_messages(update, context, text='–í—ã–±–µ—Ä–∏ —Ç–µ–º—É', markup=markup)


# –†–∞–∑–¥–µ–ª –ì–µ–Ω–µ—Ç–∏–∫–∞ –ü—Ä–∞–∫—Ç–∏–∫–∞
def genetics_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ì–µ–Ω–µ—Ç–∏–∫–∞')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ì–µ–Ω–µ—Ç–∏–∫–∞', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ì–µ–Ω–µ—Ç–∏–∫–∞', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ì–µ–Ω–µ—Ç–∏–∫–∞', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ì–µ–Ω–µ—Ç–∏–∫–∞', task_number, '–¢–µ–∫—Å—Ç:'))


# –†–∞–∑–¥–µ–ª –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def biotechnology_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', task_number, '–¢–µ–∫—Å—Ç:'))


# –†–∞–∑–¥–µ–ª –°–µ–ª–µ–∫—Ü–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def breeding_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–°–µ–ª–µ–∫—Ü–∏—è')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–°–µ–ª–µ–∫—Ü–∏—è', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–°–µ–ª–µ–∫—Ü–∏—è', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–°–µ–ª–µ–∫—Ü–∏—è', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–°–µ–ª–µ–∫—Ü–∏—è', task_number, '–¢–µ–∫—Å—Ç:'))


# –¢–µ–º–∞ –ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏ –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def history_and_methods_citology_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏', task_number, '–¢–µ–∫—Å—Ç:'))


# –¢–µ–º–∞ –ë–∏–æ—Ö–∏–º–∏—è –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def biochemistry_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ë–∏–æ—Ö–∏–º–∏—è')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ë–∏–æ—Ö–∏–º–∏—è', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ë–∏–æ—Ö–∏–º–∏—è', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ë–∏–æ—Ö–∏–º–∏—è', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ë–∏–æ—Ö–∏–º–∏—è', task_number, '–¢–µ–∫—Å—Ç:'))


# –¢–µ–º–∞ –°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def cell_structure_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏', task_number, '–¢–µ–∫—Å—Ç:'))


# –¢–µ–º–∞ –ú–µ—Ç–∞–±–æ–ª–∏–∑–º –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def metabolism_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º', task_number, '–¢–µ–∫—Å—Ç:'))


# –¢–µ–º–∞ –ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def matrix_reactions_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', task_number, '–¢–µ–∫—Å—Ç:'))


# –¢–µ–º–∞ –ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ü—Ä–∞–∫—Ç–∏–∫–∞
def cell_cycle_prac(update, context):
    global task_key
    # –ø–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    task_number = task('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª')
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ—Ä–º—É –Ω–∞ —Å—É—Ç–∫–∏
    if task_number == 0:
        send_messages(update, context, text='–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ë–µ–≥–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å')
    else:
        task_key = get_task_text('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', task_number, '–ö–ª—é—á:')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–∏–∏
        if get_task_text('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'):
            send_photo_with_caption(update, context, get_task_text('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª', task_number, '–¢–µ–∫—Å—Ç:'), None,
                                    get_task_text('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª', task_number, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:'))
        else:
            send_messages(update, context, text=get_task_text('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª', task_number, '–¢–µ–∫—Å—Ç:'))


# –¥–∏–∞–ª–æ–≥ –¢–µ–æ—Ä–∏—è
def conspect(update, context):
    caption = '''‚ùï –°–æ–≤–µ—Ç—É–µ–º –∏–∑—É—á–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É ‚Äî —Ç–µ–º—ã —Å–≤–µ—Ä—Ö—É –ø–æ–º–æ–≥—É—Ç –ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–µ—Ö, —á—Ç–æ –∏–¥—É—Ç –Ω–∏–∂–µ.

–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:'''
    keyboard = [
        [InlineKeyboardButton('–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞', callback_data="–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞ —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è', callback_data="–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ì–µ–Ω–µ—Ç–∏–∫–∞', callback_data="–ì–µ–Ω–µ—Ç–∏–∫–∞ —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏ —Å–µ–ª–µ–∫—Ü–∏—è', callback_data="–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏ –°–µ–ª–µ–∫—Ü–∏—è —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞', callback_data="–ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –º–∏—Ä–∞ —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è —á–µ–ª–æ–≤–µ–∫–∞', callback_data="–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–≠–≤–æ–ª—é—Ü–∏—è', callback_data="–≠–≤–æ–ª—é—Ü–∏—è —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–≠–∫–æ–ª–æ–≥–∏—è', callback_data="–≠–∫–æ–ª–æ–≥–∏—è —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–í –º–µ–Ω—é', callback_data="–í –º–µ–Ω—é")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_messages(update, context, caption, markup)


# –†–∞–∑–¥–µ–ª –ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞ –¢–µ–æ—Ä–∏—è
def biology_as_science_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1V8CRBD_NWHVGB5RVxbSXKdhwsmAe_irgcWOD-T3M7_Q/edit?usp=drive_link'>üìë –°–≤–æ–π—Å—Ç–≤–∞ –∏ —É—Ä–æ–≤–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±–∏–æ—Å–∏—Å—Ç–µ–º. –†–∞–∑–¥–µ–ª—ã –∏ –º–µ—Ç–æ–¥—ã –±–∏–æ–ª–æ–≥–∏–∏</a>

<a href='https://docs.google.com/document/d/17gU7Co2qcBKVhptiXlLvfKTOoh_zsnWFx-De6lYIdiQ/edit?usp=drive_link'>üìë –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML, disable_web_page_preview = True)


# –†–∞–∑–¥–µ–ª –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def molecular_and_cellular_biology_main_con(update, context):
    keyboard = [
        [InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏. –ö–ª–µ—Ç–æ—á–Ω–∞—è —Ç–µ–æ—Ä–∏—è', callback_data="–ò—Å—Ç–æ—Ä–∏—è —Ü–∏—Ç–æ–ª–æ–≥–∏–∏ —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ë–∏–æ—Ö–∏–º–∏—è', callback_data="–ë–∏–æ—Ö–∏–º–∏—è —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏', callback_data="–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ú–µ—Ç–∞–±–æ–ª–∏–∑–º', callback_data="–ú–µ—Ç–∞–±–æ–ª–∏–∑–º —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏', callback_data="–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —Ç–µ–æ—Ä–∏—è")],
        [InlineKeyboardButton('–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª', callback_data="–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª —Ç–µ–æ—Ä–∏—è")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_messages(update, context, text='–í—ã–±–µ—Ä–∏ —Ç–µ–º—É', markup=markup)


# –†–∞–∑–¥–µ–ª –ì–µ–Ω–µ—Ç–∏–∫–∞ –¢–µ–æ—Ä–∏—è
def genetics_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/15lipZln844hOfzfO5ZQfXJwZ_E1cjO3ciOAKEukInj0/edit?usp=sharing'>üìë –û—Å–Ω–æ–≤–Ω—ã–µ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è –∏ —Å–∏–º–≤–æ–ª—ã. –ú–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ç–∏–∫–∏</a>

<a href='https://docs.google.com/document/d/1I6EyUTvBh4OW5s_Kfw4Cflx8gQmi9J_-DgDInYyf9vo/edit?usp=sharing'>üìë –ì–µ–Ω–µ—Ç–∏–∫–∞ –ú–µ–Ω–¥–µ–ª—è</a>

<a href = 'https://docs.google.com/document/d/1C4Wk499yuDfAhM4welcv_TCRn_-Q255GwP7CRCnnCQw/edit?usp=sharing'>üìë –ì–µ–Ω–µ—Ç–∏–∫–∞ –ú–æ—Ä–≥–∞–Ω–∞. –•—Ä–æ–º–æ—Å–æ–º–Ω–∞—è —Ç–µ–æ—Ä–∏—è –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏</a>

<a href = 'https://docs.google.com/document/d/19FIgIge7H-xlA1a8S-98keyqapXTaNXin-B0MZgdCK0/edit?usp=sharing'>üìë –ò–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å. –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–∑–Ω–∏</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –†–∞–∑–¥–µ–ª –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏ –°–µ–ª–µ–∫—Ü–∏—è –¢–µ–æ—Ä–∏—è
def biotechnology_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1ipgZOoMw1KO1PKInvnStYFLgU7xI2F5ASkWpXyx1Tdo/edit?usp=sharing'>üìë –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è</a>
<a href='https://docs.google.com/document/d/16cYkwZXNVub2ylcaCYR5E1m4F8Pdx8BAQ7YR7-1KTlA/edit?usp=drive_link'>üìë –°–µ–ª–µ–∫—Ü–∏—è</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –¢–µ–º–∞ –ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏ –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def history_and_methods_citology_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1kA8Ue_5iLpen2GmOEIAfJByZfJxufh6R_xhY5Wavk10/edit?usp=sharing'>üìë –ò—Å—Ç–æ—Ä–∏—è –∏ –º–µ—Ç–æ–¥—ã —Ü–∏—Ç–æ–ª–æ–≥–∏–∏. –ö–ª–µ—Ç–æ—á–Ω–∞—è —Ç–µ–æ—Ä–∏—è</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –¢–µ–º–∞ –ë–∏–æ—Ö–∏–º–∏—è –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def biochemistry_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1v1nQ7noVqfkrt0gAp0QU8-9aafwNaK4zZbj2Y2OW5a4/edit?usp=sharing'>üìë –•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –∫–ª–µ—Ç–∫–∏. –í–æ–¥–∞. –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞</a>

<a href='https://docs.google.com/document/d/1AuySgB2dddxSIPCRsaFn2S014y8v1jSBP1KJJ_iAvsA/edit?usp=sharing'>üìë –õ–∏–ø–∏–¥—ã</a>

<a href = 'https://docs.google.com/document/d/143tRQQUbF-QWQdfDAvV3ny2GL6JLM3yD6fQaaR3b3Ks/edit?usp=sharing'>üìë –£–≥–ª–µ–≤–æ–¥—ã</a>

<a href = 'https://docs.google.com/document/d/16WXZRksgYRACQrLb70Ok_4wXdOtfqlaKWXGAWnMqJUk/edit?usp=sharing'>üìë –ù—É–∫–ª–µ–∏–Ω–æ–≤—ã–µ –∫–∏—Å–ª–æ—Ç—ã. –ê–¢–§</a>

<a href = 'https://docs.google.com/document/d/1CMBsKh9_PdMzpeK5WvObAXNKlDtqqh3mYM6_nQA6ul0/edit?usp=sharing'>üìë –ë–µ–ª–∫–∏. –§–µ—Ä–º–µ–Ω—Ç—ã</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –¢–µ–º–∞ –°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def cell_structure_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1NGdosXt8mkpFgRpK7Bf0Ry5XVdGeHiH1-6WWTBSgh_I/edit?usp=sharing'>üìë –ü—Ä–æ–∫–∞—Ä–∏–æ—Ç—ã –∏ —ç—É–∫–∞—Ä–∏–æ—Ç—ã</a>

<a href='https://docs.google.com/document/d/1nON2sdHiu0wL7JLZtvbXkRmwb53eqMAavBYgAK3YjoI/edit?usp=sharing'>üìë –°—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–∫–∞—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–µ—Ç–∫–∏. –ë–∞–∫—Ç–µ—Ä–∏–∏ –∏ –∞—Ä—Ö–µ–∏</a>

<a href = 'https://docs.google.com/document/d/15x990_dywHVmcpIQncvdmKLLCV8saOZFSNHLBZGOUeA/edit?usp=sharing'>üìë –°—Ç—Ä–æ–µ–Ω–∏–µ —ç—É–∫–∞—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–µ—Ç–∫–∏</a>'''

    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –¢–µ–º–∞ –ú–µ—Ç–∞–±–æ–ª–∏–∑–º –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def metabolism_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1JHqaKDWGyHykpTrSjzcrBHqUV4ClDk031kj0CLTvtqU/edit?usp=sharing'>üìë –ú–µ—Ç–∞–±–æ–ª–∏–∑–º</a>

<a href='https://docs.google.com/document/d/14wt_qHqAuedkzwGs2znmR43QKeUKQIVH7aNPyLhG1-M/edit?usp=sharing'>üìë –ê–Ω–∞–±–æ–ª–∏–∑–º: —Ö–µ–º–æ—Å–∏–Ω—Ç–µ–∑ –∏ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑</a>

<a href='https://docs.google.com/document/d/1bZeJRZv4es3vVe7DQuVOJUY2FcAuxVLz7Ob1ruNXIdg/edit?usp=sharing'>üìë –ö–∞—Ç–∞–±–æ–ª–∏–∑–º: –±—Ä–æ–∂–µ–Ω–∏–µ –∏ –∫–ª–µ—Ç–æ—á–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –¢–µ–º–∞ –ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def matrix_reactions_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/1_O0of-Q1Ngw-BuosM-SVtHt09Cp7EyzMhyeWA07dOTc/edit?usp=sharing'>üìë –†–µ–ø–ª–∏–∫–∞—Ü–∏—è –î–ù–ö</a>

<a href='https://docs.google.com/document/d/19ki2hZ7bfwCil6pzt58jxPuSPQKzqKxj1EtZ-GKNOvw/edit?usp=sharing'>üìë –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –¢–µ–º–∞ –ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª –†–∞–∑–¥–µ–ª–∞ –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –∏ –∫–ª–µ—Ç–æ—á–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –¢–µ–æ—Ä–∏—è
def cell_cycle_con(update, context):
    text = '''<a href='https://docs.google.com/document/d/18DfCOdE0V7TmNSV3pYbMLxmkFgQknoLauC6du38_5HM/edit?usp=sharing'>üìë –ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª</a>'''
    chat_id = update.effective_chat.id
    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=telegram.ParseMode.HTML,
                             disable_web_page_preview=True)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button(update, context):
    query = update.callback_query
    variant = query.data
    query.answer()
    global user_status
    global first_session
    global grade
    if variant == '–ü—Ä–µ–∞–º–±—É–ª–∞':
        advent(update, context)
    if variant == '10 –∫–ª–∞—Å—Å':
        send_photo_with_caption(update, context, '''üê£ –¢–≤–æ—è –Ω–æ—Ä–º–∞ ‚Äî 10 –∑–∞–¥–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. 
–ß—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ, –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –Ø –∏–ª–∏ –ò–≤ –±—É–¥–µ–º —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å.''')
        grade = 10
        time.sleep(2)
        reminder(update, context)
    if variant == '11 –∫–ª–∞—Å—Å':
        send_photo_with_caption(update, context, '''üê• –¢–≤–æ—è –Ω–æ—Ä–º–∞ ‚Äî 20 –∑–∞–¥–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
–ß—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ, –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –Ø –∏–ª–∏ –ò–≤ –±—É–¥–µ–º —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å.''')
        grade = 11
        time.sleep(2)
        reminder(update, context)

    if variant == '–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–æ—Ä–∏–µ–π':
        user_status = '—Ç–µ–æ—Ä–∏—è'
        conspect(update, context)
    if variant == '–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è':
        user_status = '—Ç—Ä–µ–Ω–∞–∂–µ—Ä'
        if first_session:
            start_prac(update, context)
        else:
            practice(update, context)
    if variant == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        reminder(update, context)

    if variant == '–í –º–µ–Ω—é':
        user_status = 'menu'
        menu(update, context)

    if variant == '–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        user_status = '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        timer(update, context, True)
    if variant == '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
        timer(update, context, False)
    # —Ç–µ–æ—Ä–∏—è
    if variant == '–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞ —Ç–µ–æ—Ä–∏—è':
        biology_as_science_con(update, context)
    if variant == '–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è —Ç–µ–æ—Ä–∏—è':
        molecular_and_cellular_biology_main_con(update, context)
    if variant == '–ò—Å—Ç–æ—Ä–∏—è —Ü–∏—Ç–æ–ª–æ–≥–∏–∏ —Ç–µ–æ—Ä–∏—è':
        history_and_methods_citology_con(update, context)
    if variant == '–ë–∏–æ—Ö–∏–º–∏—è —Ç–µ–æ—Ä–∏—è':
        biochemistry_con(update, context)
    if variant == '–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ç–µ–æ—Ä–∏—è':
        cell_structure_con(update, context)
    if variant == '–ú–µ—Ç–∞–±–æ–ª–∏–∑–º —Ç–µ–æ—Ä–∏—è':
        metabolism_con(update, context)
    if variant == '–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ —Ç–µ–æ—Ä–∏—è':
        matrix_reactions_con(update, context)
    if variant == '–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª —Ç–µ–æ—Ä–∏—è':
        cell_cycle_con(update, context)
    if variant == '–ì–µ–Ω–µ—Ç–∏–∫–∞ —Ç–µ–æ—Ä–∏—è':
        genetics_con(update, context)
    if variant == '–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏ –°–µ–ª–µ–∫—Ü–∏—è —Ç–µ–æ—Ä–∏—è':
        biotechnology_con(update, context)
    # –ø—Ä–∞–∫—Ç–∏–∫–∞
    if variant == '–ë–∏–æ–ª–æ–≥–∏—è –∫–∞–∫ –Ω–∞—É–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞':
        biology_as_science_prac(update, context)
    if variant == '–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –±–∏–æ–ª–æ–≥–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞':
        molecular_and_cellular_biology_main_prac(update, context)
    if variant == '–ò—Å—Ç–æ—Ä–∏—è —Ü–∏—Ç–æ–ª–æ–≥–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞':
        history_and_methods_citology_prac(update, context)
    if variant == '–ë–∏–æ—Ö–∏–º–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞':
        biochemistry_prac(update, context)
    if variant == '–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞':
        cell_structure_prac(update, context)
    if variant == '–ú–µ—Ç–∞–±–æ–ª–∏–∑–º –ø—Ä–∞–∫—Ç–∏–∫–∞':
        metabolism_prac(update, context)
    if variant == '–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞':
        matrix_reactions_prac(update, context)
    if variant == '–ö–ª–µ—Ç–æ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∞–∫—Ç–∏–∫–∞':
        cell_cycle_prac(update, context)
    if variant == '–ì–µ–Ω–µ—Ç–∏–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞':
        genetics_prac(update, context)
    if variant == '–ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞':
        biotechnology_prac(update, context)
    if variant == '–°–µ–ª–µ–∫—Ü–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∞':
        breeding_prac(update, context)


# –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
def menu(update, context):
    caption = '–ß–µ–º –∑–∞–π–º–µ–º—Å—è?'
    keyboard = [
        [InlineKeyboardButton('–ò–∑—É—á–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç', callback_data="–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–æ—Ä–∏–µ–π")],
        [InlineKeyboardButton('–ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏', callback_data="Zero")],
        [InlineKeyboardButton('–ü–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π', callback_data="–ü–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è")],
        [InlineKeyboardButton('–ü—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç', callback_data="Zero")],
        [InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
        [InlineKeyboardButton('–ü–æ—á–∏—Ç–∞—Ç—å –∫–æ–º–∏–∫—Å –æ –≤–∞–∂–Ω–æ–º', callback_data="Zero")],
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫', callback_data="Zero")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    send_photo_with_caption(update, context, caption, markup)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def start(update, context):
    global first_session
    keyboard = [
            [InlineKeyboardButton('–ü–æ–≥–æ–¥–∏—Ç–µ, –∫–∞–∫ –≤—ã —Å–æ–±—Ä–∞–ª–∏—Å—å –º–µ–Ω—è –≥–æ—Ç–æ–≤–∏—Ç—å?', callback_data="–ü—Ä–µ–∞–º–±—É–ª–∞")]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    name = update.message.chat.first_name
    first_session = True
    caption = '''–ü—Ä–∏–≤–µ—Ç, {name}! üëã
    
–ï—Å–ª–∏ —Ç—ã –∏—â–µ—à—å –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ ‚Äî –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–æ—Ç –æ–Ω!'''.format(name=name)
    send_photo_with_caption(update, context, caption, markup)


def advent(update, context):
    caption = '''–î–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É –Ω–∞—Å –µ—Å—Ç—å:
    
üçÄ –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º –∫–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
üçÄ –¢—Ä–µ–Ω–∞–∂—ë—Ä –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –±–∞–Ω–∫–∞ –§–ò–ü–ò
üçÄ –ö–≤–µ—Å—Ç—ã –≤–º–µ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤'''
    send_photo_with_caption(update, context, caption)
    caption = '''–°–∫–∞–∂–µ–º —Å—Ä–∞–∑—É: –ï–ì–≠ –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ ‚Äî —Å–µ—Ä—å—ë–∑–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω. –ö –Ω–µ–º—É –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è —Å –Ω—É–ª—è –Ω–∞ 90+ –±–∞–ª–ª–æ–≤ –∑–∞ –º–µ—Å—è—Ü.

–ù–∞ –æ—Å–≤–æ–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏ —É —Ç–µ–±—è —É–π–¥—ë—Ç ~–• —á–∞—Å–æ–≤, –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞–Ω–∏–π ‚Äî ~Y —á–∞—Å–æ–≤. –ï—â—ë –Ω—É–∂–Ω–æ –∑–∞–ª–æ–∂–∏—Ç—å –ø–∞—Ä—É –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –≤–æ—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö –∏ –ø—Ä–æ—Ä–µ—à–∏–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ —Å–±–æ—Ä–Ω–∏–∫–∞ –§–ò–ü–ò.

üçÄ –ï—Å–ª–∏ —Ç—ã –≤ 10 –∫–ª–∞—Å—Å–µ, –∏–∑—É—á–∞–π –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–Ω—Å–ø–µ–∫—Ç—É –≤ –Ω–µ–¥–µ–ª—é –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ä–µ—à–∞–π 10 –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ (–∏ –≤—Å–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–º –ø—Ä–µ–∂–¥–µ)
üçÄ –ï—Å–ª–∏ —Ç—ã –≤ 11 –∫–ª–∞—Å—Å–µ, –∏–∑—É—á–∞–π –ø–æ –¥–≤–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –≤ –Ω–µ–¥–µ–ª—é –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ä–µ—à–∞–π 20 –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ç–µ–º–∞–º –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ (–∏ –≤—Å–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–º –ø—Ä–µ–∂–¥–µ)'''
    send_photo_with_caption(update, context, caption)
    keyboard = [
        [InlineKeyboardButton('–ë—ã–ª–æ –±—ã —Å–ª–∞–≤–Ω–æ (–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç)', callback_data="–ö–≤–µ—Å—Ç –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å")],
        [InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='–í –º–µ–Ω—é')]
    ]
    markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=False)
    caption = '''–í –æ–±—â–µ–º-—Ç–æ, —ç—Ç–æ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü—Ä–∏—Å—Ç—É–ø–∞–π —Ö–æ—Ç—å —Å–µ–π—á–∞—Å.

–ê –≤–ø—Ä–æ—á–µ–º, —É –Ω–∞—Å –µ—Å—Ç—å –µ—â—ë 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, –º–æ–∂–µ–º –ø–æ–≤–µ—Å—Ç–∏ —Ç–µ–±–µ —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ –ë–∏–ë—É –∏ –∑–∞–æ–¥–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å?'''
    send_photo_with_caption(update, context, caption, markup)


# –æ—Å–Ω–æ–≤–Ω–∞—è
def main():
    updater = Updater("7680944125:AAFOtGfVXlE8rN3yrbxS6vwRYuddmEJEX7Q", use_context=True)
    dp = updater.dispatcher
    scheduler_thread = Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    thread = Thread(target=decided_tasks_reset)
    thread.start()
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text, handle_message))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
